{"ast":null,"code":"var _jsxFileName = \"/Users/andre/Documents/Code projects/drug-memorization-app/src/App.js\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport drugsData from './drugs'; // Import the drug data\n\nfunction App() {\n  const [currentDrugIndex, setCurrentDrugIndex] = useState(0);\n  const [history, setHistory] = useState([]); // Stack to store navigation history\n  const [correctCount, setCorrectCount] = useState(0);\n  const [totalCount, setTotalCount] = useState(0);\n  const [activeDrugs, setActiveDrugs] = useState(drugsData); // Active list of drugs being studied\n  const [completedDrugs, setCompletedDrugs] = useState([]); // List of completed drugs\n\n  // Handle progressing to the next drug\n  const handleNext = () => {\n    if (activeDrugs.length > 1) {\n      setHistory(prevHistory => [...prevHistory, currentDrugIndex]);\n      setCurrentDrugIndex(prev => (prev + 1) % activeDrugs.length);\n    } else {\n      alert(\"You have excluded all drugs or completed the study session.\");\n    }\n  };\n\n  // Handle going back to the previous drug\n  const handleBack = () => {\n    if (history.length > 0) {\n      const previousIndex = history[history.length - 1];\n      setHistory(prevHistory => prevHistory.slice(0, -1)); // Remove the last entry from history\n      setCurrentDrugIndex(previousIndex); // Go back to the previous drug\n    } else {\n      alert(\"No more previous drugs.\");\n    }\n  };\n\n  // Pronounce a drug name\n  const handlePronounce = text => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    speechSynthesis.speak(utterance);\n  };\n\n  // Mark whether the guess was correct or incorrect\n  const handleGuess = isCorrect => {\n    if (isCorrect) setCorrectCount(correctCount + 1);\n    setTotalCount(totalCount + 1);\n    setCompletedDrugs(prev => [...prev, activeDrugs[currentDrugIndex]]);\n    handleNext();\n  };\n\n  // Exclude the current drug from the study session\n  const handleExclude = () => {\n    const updatedDrugs = activeDrugs.filter((_, index) => index !== currentDrugIndex);\n    setCompletedDrugs(prev => [...prev, activeDrugs[currentDrugIndex]]);\n    setActiveDrugs(updatedDrugs);\n    setCurrentDrugIndex(0); // Reset index to the start of the updated list\n  };\n  if (activeDrugs.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 33\n      }\n    }, \"No more drugs to study!\"));\n  }\n  const currentDrug = activeDrugs[currentDrugIndex];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, \"Drug Memorization App\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"quiz-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, \"Brand Name: \", currentDrug.brand), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, \"Generic Name: \", currentDrug.generic), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, \"Category: \", currentDrug.category), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handlePronounce(currentDrug.brand),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, \"Pronounce Brand\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handlePronounce(currentDrug.generic),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, \"Pronounce Generic\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleNext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, \"Next Drug\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleBack,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, \"Go Back\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleExclude,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, \"Exclude Drug\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"guess-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, \"Did you guess the correct generic name?\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleGuess(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, \"Correct\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleGuess(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, \"Incorrect\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, \"Progress\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, \"Correct: \", correctCount, \" / \", totalCount)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, \"Study Progress\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, drugsData.map((drug, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    style: {\n      textDecoration: completedDrugs.includes(drug) ? 'line-through' : 'none',\n      fontWeight: currentDrugIndex === index ? 'bold' : 'normal',\n      color: completedDrugs.includes(drug) ? 'gray' : 'black'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, drug.brand, \" (\", drug.generic, \")\")))));\n}\nexport default App;","map":{"version":3,"names":["React","useState","drugsData","App","currentDrugIndex","setCurrentDrugIndex","history","setHistory","correctCount","setCorrectCount","totalCount","setTotalCount","activeDrugs","setActiveDrugs","completedDrugs","setCompletedDrugs","handleNext","length","prevHistory","prev","alert","handleBack","previousIndex","slice","handlePronounce","text","utterance","SpeechSynthesisUtterance","speechSynthesis","speak","handleGuess","isCorrect","handleExclude","updatedDrugs","filter","_","index","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","currentDrug","brand","generic","category","onClick","map","drug","key","style","textDecoration","includes","fontWeight","color"],"sources":["/Users/andre/Documents/Code projects/drug-memorization-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport drugsData from './drugs';  // Import the drug data\n\nfunction App() {\n  const [currentDrugIndex, setCurrentDrugIndex] = useState(0);\n  const [history, setHistory] = useState([]); // Stack to store navigation history\n  const [correctCount, setCorrectCount] = useState(0);\n  const [totalCount, setTotalCount] = useState(0);\n  const [activeDrugs, setActiveDrugs] = useState(drugsData); // Active list of drugs being studied\n  const [completedDrugs, setCompletedDrugs] = useState([]); // List of completed drugs\n\n  // Handle progressing to the next drug\n  const handleNext = () => {\n    if (activeDrugs.length > 1) {\n      setHistory((prevHistory) => [...prevHistory, currentDrugIndex]);\n      setCurrentDrugIndex((prev) => (prev + 1) % activeDrugs.length);\n    } else {\n      alert(\"You have excluded all drugs or completed the study session.\");\n    }\n  };\n\n  // Handle going back to the previous drug\n  const handleBack = () => {\n    if (history.length > 0) {\n      const previousIndex = history[history.length - 1];\n      setHistory((prevHistory) => prevHistory.slice(0, -1)); // Remove the last entry from history\n      setCurrentDrugIndex(previousIndex); // Go back to the previous drug\n    } else {\n      alert(\"No more previous drugs.\");\n    }\n  };\n\n  // Pronounce a drug name\n  const handlePronounce = (text) => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    speechSynthesis.speak(utterance);\n  };\n\n  // Mark whether the guess was correct or incorrect\n  const handleGuess = (isCorrect) => {\n    if (isCorrect) setCorrectCount(correctCount + 1);\n    setTotalCount(totalCount + 1);\n    setCompletedDrugs((prev) => [...prev, activeDrugs[currentDrugIndex]]);\n    handleNext();\n  };\n\n  // Exclude the current drug from the study session\n  const handleExclude = () => {\n    const updatedDrugs = activeDrugs.filter((_, index) => index !== currentDrugIndex);\n    setCompletedDrugs((prev) => [...prev, activeDrugs[currentDrugIndex]]);\n    setActiveDrugs(updatedDrugs);\n    setCurrentDrugIndex(0); // Reset index to the start of the updated list\n  };\n\n  if (activeDrugs.length === 0) {\n    return <div className=\"App\"><h1>No more drugs to study!</h1></div>;\n  }\n\n  const currentDrug = activeDrugs[currentDrugIndex];\n\n  return (\n    <div className=\"App\">\n      <h1>Drug Memorization App</h1>\n\n      {/* Quiz Box */}\n      <div className=\"quiz-box\">\n        <h2>Brand Name: {currentDrug.brand}</h2>\n        <h3>Generic Name: {currentDrug.generic}</h3>\n        <h4>Category: {currentDrug.category}</h4>\n        <button onClick={() => handlePronounce(currentDrug.brand)}>Pronounce Brand</button>\n        <button onClick={() => handlePronounce(currentDrug.generic)}>Pronounce Generic</button>\n        <button onClick={handleNext}>Next Drug</button>\n        <button onClick={handleBack}>Go Back</button>\n        <button onClick={handleExclude}>Exclude Drug</button>\n      </div>\n\n      {/* Guess Buttons */}\n      <div className=\"guess-box\">\n        <h3>Did you guess the correct generic name?</h3>\n        <button onClick={() => handleGuess(true)}>Correct</button>\n        <button onClick={() => handleGuess(false)}>Incorrect</button>\n      </div>\n\n      {/* Progress Box */}\n      <div className=\"progress-box\">\n        <h3>Progress</h3>\n        <p>Correct: {correctCount} / {totalCount}</p>\n      </div>\n\n      {/* Progress List */}\n      <div className=\"progress-list\">\n        <h3>Study Progress</h3>\n        <ul>\n          {drugsData.map((drug, index) => (\n            <li\n              key={index}\n              style={{\n                textDecoration: completedDrugs.includes(drug) ? 'line-through' : 'none',\n                fontWeight: currentDrugIndex === index ? 'bold' : 'normal',\n                color: completedDrugs.includes(drug) ? 'gray' : 'black'\n              }}\n            >\n              {drug.brand} ({drug.generic})\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}